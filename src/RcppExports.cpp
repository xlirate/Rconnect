// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Rconnect.h"
#include <Rcpp.h>

using namespace Rcpp;

// convolve_stretch
NumericMatrix convolve_stretch(const NumericMatrix& data, const NumericMatrix& kernel);
RcppExport SEXP _Rconnect_convolve_stretch(SEXP dataSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_stretch(data, kernel));
    return rcpp_result_gen;
END_RCPP
}
// convolve_wrap
NumericMatrix convolve_wrap(const NumericMatrix& data, const NumericMatrix& kernel);
RcppExport SEXP _Rconnect_convolve_wrap(SEXP dataSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_wrap(data, kernel));
    return rcpp_result_gen;
END_RCPP
}
// convolve_reflect
NumericMatrix convolve_reflect(const NumericMatrix& data, const NumericMatrix& kernel);
RcppExport SEXP _Rconnect_convolve_reflect(SEXP dataSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_reflect(data, kernel));
    return rcpp_result_gen;
END_RCPP
}
// convolve_zero
NumericMatrix convolve_zero(const NumericMatrix& data, const NumericMatrix& kernel);
RcppExport SEXP _Rconnect_convolve_zero(SEXP dataSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_zero(data, kernel));
    return rcpp_result_gen;
END_RCPP
}
// convolve_nan
NumericMatrix convolve_nan(const NumericMatrix& data, const NumericMatrix& kernel);
RcppExport SEXP _Rconnect_convolve_nan(SEXP dataSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_nan(data, kernel));
    return rcpp_result_gen;
END_RCPP
}
// convolve_shrink
NumericMatrix convolve_shrink(const NumericMatrix& data, const NumericMatrix& kernel);
RcppExport SEXP _Rconnect_convolve_shrink(SEXP dataSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_shrink(data, kernel));
    return rcpp_result_gen;
END_RCPP
}
// powered_convolve_stretch
NumericMatrix powered_convolve_stretch(const NumericMatrix& data, const NumericMatrix& kernel, const double power);
RcppExport SEXP _Rconnect_powered_convolve_stretch(SEXP dataSEXP, SEXP kernelSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(powered_convolve_stretch(data, kernel, power));
    return rcpp_result_gen;
END_RCPP
}
// powered_convolve_wrap
NumericMatrix powered_convolve_wrap(const NumericMatrix& data, const NumericMatrix& kernel, const double power);
RcppExport SEXP _Rconnect_powered_convolve_wrap(SEXP dataSEXP, SEXP kernelSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(powered_convolve_wrap(data, kernel, power));
    return rcpp_result_gen;
END_RCPP
}
// powered_convolve_refect
NumericMatrix powered_convolve_refect(const NumericMatrix& data, const NumericMatrix& kernel, const double power);
RcppExport SEXP _Rconnect_powered_convolve_refect(SEXP dataSEXP, SEXP kernelSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(powered_convolve_refect(data, kernel, power));
    return rcpp_result_gen;
END_RCPP
}
// powered_convolve_zero
NumericMatrix powered_convolve_zero(const NumericMatrix& data, const NumericMatrix& kernel, const double power);
RcppExport SEXP _Rconnect_powered_convolve_zero(SEXP dataSEXP, SEXP kernelSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(powered_convolve_zero(data, kernel, power));
    return rcpp_result_gen;
END_RCPP
}
// powered_convolve_nan
NumericMatrix powered_convolve_nan(const NumericMatrix& data, const NumericMatrix& kernel, const double power);
RcppExport SEXP _Rconnect_powered_convolve_nan(SEXP dataSEXP, SEXP kernelSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(powered_convolve_nan(data, kernel, power));
    return rcpp_result_gen;
END_RCPP
}
// powered_convolve_shrink
NumericMatrix powered_convolve_shrink(const NumericMatrix& data, const NumericMatrix& kernel, const double power);
RcppExport SEXP _Rconnect_powered_convolve_shrink(SEXP dataSEXP, SEXP kernelSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(powered_convolve_shrink(data, kernel, power));
    return rcpp_result_gen;
END_RCPP
}
// cache_samc_4
Rcpp::XPtr<samc::cache> cache_samc_4(const Rcpp::NumericMatrix& permiability, const Rcpp::NumericMatrix& death_rate);
RcppExport SEXP _Rconnect_cache_samc_4(SEXP permiabilitySEXP, SEXP death_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type permiability(permiabilitySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type death_rate(death_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(cache_samc_4(permiability, death_rate));
    return rcpp_result_gen;
END_RCPP
}
// samc_cache_sizes
std::vector<size_t> samc_cache_sizes(const Rcpp::XPtr<samc::cache>& ca);
RcppExport SEXP _Rconnect_samc_cache_sizes(SEXP caSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<samc::cache>& >::type ca(caSEXP);
    rcpp_result_gen = Rcpp::wrap(samc_cache_sizes(ca));
    return rcpp_result_gen;
END_RCPP
}
// samc_print_cache
void samc_print_cache(const Rcpp::XPtr<samc::cache>& ca);
RcppExport SEXP _Rconnect_samc_print_cache(SEXP caSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<samc::cache>& >::type ca(caSEXP);
    samc_print_cache(ca);
    return R_NilValue;
END_RCPP
}
// samc_one_step
Rcpp::NumericMatrix samc_one_step(const Rcpp::XPtr<samc::cache>& ca, const Rcpp::NumericMatrix& pop_in, const Rcpp::NumericMatrix& dead_in);
RcppExport SEXP _Rconnect_samc_one_step(SEXP caSEXP, SEXP pop_inSEXP, SEXP dead_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<samc::cache>& >::type ca(caSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type pop_in(pop_inSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type dead_in(dead_inSEXP);
    rcpp_result_gen = Rcpp::wrap(samc_one_step(ca, pop_in, dead_in));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rconnect_convolve_stretch", (DL_FUNC) &_Rconnect_convolve_stretch, 2},
    {"_Rconnect_convolve_wrap", (DL_FUNC) &_Rconnect_convolve_wrap, 2},
    {"_Rconnect_convolve_reflect", (DL_FUNC) &_Rconnect_convolve_reflect, 2},
    {"_Rconnect_convolve_zero", (DL_FUNC) &_Rconnect_convolve_zero, 2},
    {"_Rconnect_convolve_nan", (DL_FUNC) &_Rconnect_convolve_nan, 2},
    {"_Rconnect_convolve_shrink", (DL_FUNC) &_Rconnect_convolve_shrink, 2},
    {"_Rconnect_powered_convolve_stretch", (DL_FUNC) &_Rconnect_powered_convolve_stretch, 3},
    {"_Rconnect_powered_convolve_wrap", (DL_FUNC) &_Rconnect_powered_convolve_wrap, 3},
    {"_Rconnect_powered_convolve_refect", (DL_FUNC) &_Rconnect_powered_convolve_refect, 3},
    {"_Rconnect_powered_convolve_zero", (DL_FUNC) &_Rconnect_powered_convolve_zero, 3},
    {"_Rconnect_powered_convolve_nan", (DL_FUNC) &_Rconnect_powered_convolve_nan, 3},
    {"_Rconnect_powered_convolve_shrink", (DL_FUNC) &_Rconnect_powered_convolve_shrink, 3},
    {"_Rconnect_cache_samc_4", (DL_FUNC) &_Rconnect_cache_samc_4, 2},
    {"_Rconnect_samc_cache_sizes", (DL_FUNC) &_Rconnect_samc_cache_sizes, 1},
    {"_Rconnect_samc_print_cache", (DL_FUNC) &_Rconnect_samc_print_cache, 1},
    {"_Rconnect_samc_one_step", (DL_FUNC) &_Rconnect_samc_one_step, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rconnect(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
